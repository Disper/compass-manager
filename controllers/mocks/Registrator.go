// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Registrator is an autogenerated mock type for the Registrator type
type Registrator struct {
	mock.Mock
}

// ConfigureRuntimeAgent provides a mock function with given fields: kubeconfigSecretName
func (_m *Registrator) ConfigureRuntimeAgent(kubeconfigSecretName string) error {
	ret := _m.Called(kubeconfigSecretName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(kubeconfigSecretName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: nameFromKymaCR
func (_m *Registrator) Register(nameFromKymaCR string) (error, string) {
	ret := _m.Called(nameFromKymaCR)

	var r0 error
	var r1 string
	if rf, ok := ret.Get(0).(func(string) (error, string)); ok {
		return rf(nameFromKymaCR)
	}
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(nameFromKymaCR)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(nameFromKymaCR)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

type mockConstructorTestingTNewRegistrator interface {
	mock.TestingT
	Cleanup(func())
}

// NewRegistrator creates a new instance of Registrator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRegistrator(t mockConstructorTestingTNewRegistrator) *Registrator {
	mock := &Registrator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
