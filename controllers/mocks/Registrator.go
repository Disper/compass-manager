// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	graphql "github.com/kyma-incubator/compass/components/director/pkg/graphql"
	mock "github.com/stretchr/testify/mock"
)

// Registrator is an autogenerated mock type for the Registrator type
type Registrator struct {
	mock.Mock
}

// RefreshCompassToken provides a mock function with given fields: compassId, globalAccount
func (_m *Registrator) RefreshCompassToken(compassId string, globalAccount string) (graphql.OneTimeTokenForRuntimeExt, error) {
	ret := _m.Called(compassId, globalAccount)

	var r0 graphql.OneTimeTokenForRuntimeExt
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (graphql.OneTimeTokenForRuntimeExt, error)); ok {
		return rf(compassId, globalAccount)
	}
	if rf, ok := ret.Get(0).(func(string, string) graphql.OneTimeTokenForRuntimeExt); ok {
		r0 = rf(compassId, globalAccount)
	} else {
		r0 = ret.Get(0).(graphql.OneTimeTokenForRuntimeExt)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(compassId, globalAccount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterInCompass provides a mock function with given fields: compassRuntimeLabels
func (_m *Registrator) RegisterInCompass(compassRuntimeLabels map[string]interface{}) (string, error) {
	ret := _m.Called(compassRuntimeLabels)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) (string, error)); ok {
		return rf(compassRuntimeLabels)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) string); ok {
		r0 = rf(compassRuntimeLabels)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(compassRuntimeLabels)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRegistrator interface {
	mock.TestingT
	Cleanup(func())
}

// NewRegistrator creates a new instance of Registrator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRegistrator(t mockConstructorTestingTNewRegistrator) *Registrator {
	mock := &Registrator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
